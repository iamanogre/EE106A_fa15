#!/usr/bin/env python
import rospy
import sys

from tf2_msgs.msg import TFMessage
from tfservice.srv import *
#from sensor_msgs.msg import Imu
#from geometry_msgs.msg import Vector3
#from kalman_zumy.srv import ImuSrv, ImuSrvResponse

class TfService:
  #Callback for when an image is received
  def tfReceived(self, message):
    #Save the image in the instance variable
    if (message.transforms[0].child_frame_id[-1] in self.ar_tag_arr):
        self.tf = message	
        self.new = True
    else:
	self.new = False

    #Print an alert to the console
    #print(rospy.get_name() + ":Imu received!")

  #When another node calls the service, return the last image
  def getLastTf(self, request):
    value = self.new # grab current value of self.new
    self.new = False # whether self.new is true or false, turn to false!
    return tfSrvResponse(value, self.tf)

  def __init__(self,mname, ar_tag1, ar_tag2, ar_tag3, ar_tag4):
    print "Launching TF service for " + mname

    #Create variables to store the last IMU data received
    self.tf = TFMessage()
    self.new = False # tells us whether we have new tf information
    self.ar_tag_arr = [ar_tag1, ar_tag2, ar_tag3, ar_tag4]

    #Initialize the node
    rospy.init_node(mname +'_tf_listener')

    #Subscribe to the tf topic
    self.topic = "/tf"
    rospy.Subscriber(self.topic, TFMessage, self.tfReceived)

    #Create the service
    rospy.Service('last_tf', tfSrv, self.getLastTf)
    print "Created service 'last_tf' on node /" + mname + "_tf_listener"

  def run(self):
    rospy.spin()

#Python's syntax for a main() method
if __name__ == '__main__':
  # try:
  #     mname = rospy.get_param('~mname')
  # except KeyError:
  #     print "value not set--no clue why this won't work\nresorting to 'zumy7b'"
  #     mname = 'zumy7b'
  if len(sys.argv) != 6:
    print('Usage: zumy_name ar_tag1 ar_tag2 ar_tag3 ar_tag4') 
  mname = sys.argv[1]
  ar_tag1 = sys.argv[2]
  ar_tag2 = sys.argv[3]
  ar_tag3 = sys.argv[4]
  ar_tag4 = sys.argv[5]
  node = TfService(mname, ar_tag1, ar_tag2, ar_tag3, ar_tag4)
  node.run()

