// Generated by gencpp from file tfservice/tfSrvRequest.msg
// DO NOT EDIT!


#ifndef TFSERVICE_MESSAGE_TFSRVREQUEST_H
#define TFSERVICE_MESSAGE_TFSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tfservice
{
template <class ContainerAllocator>
struct tfSrvRequest_
{
  typedef tfSrvRequest_<ContainerAllocator> Type;

  tfSrvRequest_()
    : zumy()  {
    }
  tfSrvRequest_(const ContainerAllocator& _alloc)
    : zumy(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _zumy_type;
  _zumy_type zumy;




  typedef boost::shared_ptr< ::tfservice::tfSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tfservice::tfSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct tfSrvRequest_

typedef ::tfservice::tfSrvRequest_<std::allocator<void> > tfSrvRequest;

typedef boost::shared_ptr< ::tfservice::tfSrvRequest > tfSrvRequestPtr;
typedef boost::shared_ptr< ::tfservice::tfSrvRequest const> tfSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tfservice::tfSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tfservice::tfSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tfservice

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'tf2_msgs': ['/opt/ros/indigo/share/tf2_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tfservice::tfSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tfservice::tfSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfservice::tfSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tfservice::tfSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfservice::tfSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tfservice::tfSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tfservice::tfSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1d8390d9d8ade443752a01f1b0ebdbb";
  }

  static const char* value(const ::tfservice::tfSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1d8390d9d8ade44ULL;
  static const uint64_t static_value2 = 0x3752a01f1b0ebdbbULL;
};

template<class ContainerAllocator>
struct DataType< ::tfservice::tfSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tfservice/tfSrvRequest";
  }

  static const char* value(const ::tfservice::tfSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tfservice::tfSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zumy\n\
";
  }

  static const char* value(const ::tfservice::tfSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tfservice::tfSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zumy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct tfSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tfservice::tfSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tfservice::tfSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "zumy: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.zumy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TFSERVICE_MESSAGE_TFSRVREQUEST_H
